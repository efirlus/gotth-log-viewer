package components

import (
    "gotthlogviewer/internal/types"
    "strings"
	"slices"
)

templ LogViewer(logs []types.LogEntry, filters ViewFilters) {
    @Layout() {
        <div class="min-h-screen bg-base p-6">
            <div class="max-w-7xl mx-auto">
                <div class="mb-8">
                    <h1 class="text-3xl font-bold text-text mb-4">Log Viewer</h1>
                    
                    // Filter bar with nice styling
                    <div class="bg-mantle rounded-lg shadow-lg p-4 mb-6 border border-surface0">
                        <div class="flex items-center gap-4">
                            // Search box with icon
                            <div class="flex-1 relative">
                                <span class="absolute left-3 top-1/2 -translate-y-1/2 text-subtext">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <circle cx="11" cy="11" r="8"></circle>
                                        <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                                    </svg>
                                </span>
                                <input 
                                    type="text"
                                    name="search"
                                    placeholder="Search logs..."
                                    value={filters.Search}
                                    class="w-full pl-10 pr-4 py-2 bg-crust text-text border border-surface0 rounded-lg focus:ring-2 focus:ring-blue focus:border-transparent"
                                    hx-get="/api/logs"
                                    hx-trigger="input changed delay:300ms"
                                    hx-target="#log-container"
                                    hx-include="[name='level'], [name='program']"
                                />
                            </div>
                            
                            // Level filter dropdown
                            <select
                                name="level"
                                class="px-4 py-2 bg-crust text-text border border-surface0 rounded-lg focus:ring-2 focus:ring-blue"
                                hx-get="/api/logs"
                                hx-trigger="change"
                                hx-target="#log-container"
                                hx-include="[name='search'], [name='program']"
                            >
                                <option value="" selected?={ filters.Level == "" }>All Levels</option>
                                <option value="error" selected?={ filters.Level == "error" }>Error</option>
                                <option value="warn" selected?={ filters.Level == "warn" }>Warning</option>
                                <option value="info" selected?={ filters.Level == "info" }>Info</option>
                                <option value="debug" selected?={ filters.Level == "debug" }>Debug</option>
                            </select>
                        </div>

                        <div class="flex flex-wrap gap-2">
                            <button 
                                class={
                                    "px-3 py-1 rounded-full text-sm font-medium transition-colors",
                                    "border border-surface1",
                                    templ.KV("bg-lavender text-crust", filters.Program == ""),
                                    templ.KV("bg-surface0 text-text hover:bg-surface1", filters.Program != "")
                                }
                                hx-get="/api/logs"
                                hx-trigger="click"
                                hx-target="#log-container"
                                hx-include="[name='search'], [name='level']"
                                name="program"
                                value=""
                            >
                                All Programs
                            </button>
                            
                            for _, program := range getUniquePrograms(logs) {
                                <button
                                    class={
                                        "px-3 py-1 rounded-full text-sm font-medium transition-colors",
                                        "border border-surface1",
                                        templ.KV("bg-lavender text-crust", filters.Program == program),
                                        templ.KV("bg-surface0 text-text hover:bg-surface1", filters.Program != program)
                                    }
                                    hx-get="/api/logs"
                                    hx-trigger="click"
                                    hx-target="#log-container"
                                    hx-include="[name='search'], [name='level']"
                                    name="program"
                                    value={ program }
                                >
                                    { program }
                                </button>
                            }
                        </div>


                    </div>

                    // Log entries
                    <div id="log-container">
                        @LogList(logs, filters)
                    </div>
                </div>
            </div>
        </div>
    }
}

func sortLogs(logs []types.LogEntry) []types.LogEntry {
    sorted := make([]types.LogEntry, len(logs))
    copy(sorted, logs)

    slices.SortFunc(sorted, func(a, b types.LogEntry) int {
        switch {
            case a.Timestamp > b.Timestamp: return -1
            case a.Timestamp < b.Timestamp: return 1
            default: return 0
        }
    })

    return sorted
}

// ------------ filter -------------- //`

type ViewFilters struct {
    Search string
    Level string
    Program string
}

templ LogList(logs []types.LogEntry, filters ViewFilters) {
    for _, log := range sortLogs(FilterLogs(logs, filters)) {
        <div class="bg-surface0 rounded mb-2 p-2">
            <div class="flex gap-2 items-center">
                <span class="text-subtext text-sm">{ log.Timestamp }</span>
                <span class={
                    "px-2 py-0.5 rounded text-crust text-sm",
                    templ.KV("bg-red", log.Level == "error"),
                    templ.KV("bg-peach", log.Level == "warn"),
                    templ.KV("bg-blue", log.Level == "info"),
                    templ.KV("bg-surface1 text-text", log.Level == "debug"),
                }>{ log.Level }</span>
                if log.Program != "" {
                    <span class="bg-lavender text-crust px-2 py-0.5 rounded text-sm">{ log.Program }</span>
                }
            </div>
            <div class="mt-2 border-l-2 border-surface1 pl-2">
                <pre class="whitespace-pre-wrap break-words text-text">{ log.Message }</pre>
                if log.Location != nil {
                    <div class="text-subtext text-sm mt-1">{ *log.Location }</div>
                }
            </div>
        </div>
    }
}

func FilterLogs(logs []types.LogEntry, filters ViewFilters) []types.LogEntry {
    filtered := logs

    if filters.Search != "" {
        search := strings.ToLower(filters.Search)
        filtered =  slices.DeleteFunc(slices.Clone(logs), func(log types.LogEntry) bool {
            return !strings.Contains(strings.ToLower(log.Message), search) &&
                !strings.Contains(strings.ToLower(log.Program), search) &&
                !strings.Contains(strings.ToLower(log.Level), search)
        })
    }

    if filters.Level != "" {
        filtered = slices.DeleteFunc(slices.Clone(logs), func(log types.LogEntry) bool {
            return log.Level != filters.Level
        })
    }

    return filtered
}

// Helper function to get unique program names from logs
func getUniquePrograms(logs []types.LogEntry) []string {
    programMap := make(map[string]bool)
    for _, log := range logs {
        if log.Program != "" {
            programMap[log.Program] = true
        }
    }

    // Convert to sorted slice
    programs := make([]string, 0, len(programMap))
    for program := range programMap {
        programs = append(programs, program)
    }
    slices.Sort(programs)
    return programs
}