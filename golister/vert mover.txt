package main

import (
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	// Read the file line by line
	data, err := os.ReadFile("list.txt")
	if err != nil {
		fmt.Println("Error reading file:", err)
		return
	}

	lines := strings.Split(string(data), "\n")

	for _, line := range lines {
		// Extract source and target paths
		sourcePath := strings.TrimSpace(line)
		targetDir := filepath.Join("/NAS/samba/MMD/세로MMD", filepath.Dir(sourcePath)[10:])

		// Create target directory if it doesn't exist
		if err := os.MkdirAll(targetDir, 0755); err != nil {
			fmt.Println("Error creating directory:", err)
			continue
		}

		// Move file to target directory
		targetPath := filepath.Join(targetDir, filepath.Base(sourcePath))
		if err := moveFile(sourcePath, targetPath); err != nil {
			fmt.Println("Error moving file:", err)
			continue
		}

		fmt.Println("Moved:", sourcePath, "to", targetPath)
	}
}

func moveFile(sourcePath, targetPath string) error {
	// Open source file
	inputFile, err := os.Open(sourcePath)
	if err != nil {
		return fmt.Errorf("Couldn't open source file: %v", err)
	}
	defer inputFile.Close()

	// Create new file on target drive
	outputFile, err := os.Create(targetPath)
	if err != nil {
		return fmt.Errorf("Couldn't create target file: %v", err)
	}
	defer outputFile.Close()

	// Copy contents
	_, err = io.Copy(outputFile, inputFile)
	if err != nil {
		return fmt.Errorf("Couldn't copy file: %v", err)
	}

	// Delete source file
	err = os.Remove(sourcePath)
	if err != nil {
		return fmt.Errorf("Couldn't delete source file: %v", err)
	}

	return nil
}
